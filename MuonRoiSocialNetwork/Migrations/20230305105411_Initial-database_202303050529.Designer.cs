// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MuonRoiSocialNetwork.Infrastructure;

#nullable disable

namespace MuonRoiSocialNetwork.Migrations
{
    [DbContext(typeof(MuonRoiSocialNetworkDbContext))]
    [Migration("20230305105411_Initial-database_202303050529")]
    partial class Initialdatabase_202303050529
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ConnectVN.Social_Network.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("CreatedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(107);

                    b.Property<int?>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(109);

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(110);

                    b.Property<string>("NameCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(108);

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(105);

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDateTS = 1672531200.0,
                            CreatedUserId = 1,
                            CreatedUserName = "muonroi",
                            Guid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            NameCategory = "Tiên hiệp",
                            SiteId = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedDateTS = 1672531200.0,
                            CreatedUserId = 1,
                            CreatedUserName = "muonroi",
                            Guid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            NameCategory = "Huyền huyễn",
                            SiteId = 0
                        });
                });

            modelBuilder.Entity("ConnectVN.Social_Network.Chapters.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(100000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChapterTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("CreatedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(107);

                    b.Property<int?>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(109);

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(110);

                    b.Property<int>("NumberCharacter")
                        .HasColumnType("int");

                    b.Property<string>("NumberOfChapter")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(108);

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(105);

                    b.HasKey("Id");

                    b.HasIndex("StoryGuid");

                    b.ToTable("Chapter", (string)null);
                });

            modelBuilder.Entity("ConnectVN.Social_Network.Roles.GroupUserMember", b =>
                {
                    b.Property<Guid>("AppUserKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppRoleKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CreatedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(107);

                    b.Property<int?>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(109);

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(106);

                    b.Property<int>("Guest")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(110);

                    b.Property<int>("Manage")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("Staff")
                        .HasColumnType("int");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(108);

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(105);

                    b.Property<int>("Viewer")
                        .HasColumnType("int");

                    b.HasKey("AppUserKey", "AppRoleKey");

                    b.HasIndex("AppRoleKey");

                    b.ToTable("GroupUserMember", (string)null);

                    b.HasData(
                        new
                        {
                            AppUserKey = new Guid("e0223a03-2945-49db-976e-736433465b7f"),
                            AppRoleKey = new Guid("72377426-b057-46ca-98ff-1ca9d33ea0c1"),
                            CreatedDateTS = 1672531200.0,
                            CreatedUserId = 1,
                            CreatedUserName = "muonroi",
                            Guest = 0,
                            Guid = new Guid("00000000-0000-0000-0000-000000000000"),
                            Id = 1,
                            IsDeleted = false,
                            Manage = 0,
                            SiteId = 0,
                            Staff = 0,
                            Viewer = 0
                        });
                });

            modelBuilder.Entity("ConnectVN.Social_Network.Storys.Story", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<double>("CreatedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(107);

                    b.Property<int?>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(109);

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(106);

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Img_Url")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(110);

                    b.Property<bool>("IsShow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Story_Synopsis")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Story_Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TotalFavorite")
                        .HasColumnType("int");

                    b.Property<int>("TotalView")
                        .HasColumnType("int");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(108);

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(105);

                    b.HasKey("Guid");

                    b.HasIndex("CategoryId");

                    b.ToTable("Story", (string)null);

                    b.HasData(
                        new
                        {
                            Guid = new Guid("4636aa8f-683a-4cb4-8498-152a63c9d881"),
                            CategoryId = 1,
                            CreatedDateTS = 1672531200.0,
                            CreatedUserId = 1,
                            CreatedUserName = "muonroi",
                            Id = 0,
                            Img_Url = "aacd50da-4e0d-47e4-939c-a4ace0f707ea.image/jpeg*Stories/ConnectVn_ta-co-mot-toa-khi-van-te-dan-cbde5bc2e8.jpg",
                            IsDeleted = false,
                            IsShow = true,
                            Rating = 0.0,
                            SiteId = 0,
                            Slug = "ta-co-mot-toa-khi-van-te-dan",
                            Story_Synopsis = "Bình An huyện nha dịch Trần Uyên xuyên qua mà đến, trong đầu cất giấu một tòa khí vận tế đàn .  Chỉ cần hiến tế khí vận, liền có thể thu được thiên cơ chỉ dẫn, thần thông, công pháp, tà thuật, thiên tài địa bảo ...  Mọi loại đều là hạ phẩm, chỉ có tập võ cao!  Đại Tấn những năm cuối, Tây vực Phật môn truyền đạo Trung Nguyên, Nam Cương yêu tộc nhìn chằm chằm .  Bắc man thiết kỵ 300 ngàn, uy áp biên cảnh .  Đạo môn chân nhân, Kiếm Tông kiếm tiên, ma đạo cự phách, giang hồ danh túc ... Thiên hạ đem loạn!  Đây là xấu nhất thời đại, cũng là tốt nhất thời đại ...  Ta gọi Trần Uyên, đến từ vực sâu!  Sát phạt quả đoán .  Chúc bạn có những giây phút vui vẻ khi đọc truyện Ta Có Một Tòa Khí Vận Tế Đàn!",
                            Story_Title = "Ta Có Một Tòa Khí Vận Tế Đàn",
                            TotalFavorite = 0,
                            TotalView = 0
                        },
                        new
                        {
                            Guid = new Guid("1bcfb006-2ec0-4795-9610-6c711b6955df"),
                            CategoryId = 1,
                            CreatedDateTS = 1672531200.0,
                            CreatedUserId = 1,
                            CreatedUserName = "muonroi",
                            Id = 0,
                            Img_Url = "079dec71-43fd-4701-8450-a1ad1e6c39ff.image/jpeg*Stories/ConnectVn_nhan-sinh-tuy-tien-bat-dau-tu-tuoi-ba-muoi-ban-dic-7a54bfe686.jpg",
                            IsDeleted = false,
                            IsShow = true,
                            Rating = 0.0,
                            SiteId = 0,
                            Slug = "nhan-sinh-tuy-tien-bat-dau-tu-tuoi-ba-muoi",
                            Story_Synopsis = "Người khác xuyên việt trẻ thêm vài tuổi, Trần Tự xuyên việt thành ông chú 30.  Tưởng đâu đã có mái ấm êm đềm, ai ngờ xuyên đến lại đúng dịp ly hôn  Nếu như đã không có gì để mà lo lắng, vậy thì sống cho thật thoải mái đi.",
                            Story_Title = "Nhân Sinh Tùy Tiện Bắt Đầu Từ Tuổi Ba Mươi (Bản Dịch)",
                            TotalFavorite = 0,
                            TotalView = 0
                        });
                });

            modelBuilder.Entity("ConnectVN.Social_Network.Storys.StoryNotifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("CreatedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(107);

                    b.Property<int?>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(109);

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Img_Url")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(110);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("NotifiUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("NotificationSate")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReadNotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<Guid>("StoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(108);

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(105);

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StoryGuid");

                    b.HasIndex("UserGuid");

                    b.ToTable("StoryNotifications", (string)null);
                });

            modelBuilder.Entity("ConnectVN.Social_Network.Storys.StoryPublish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("CreatedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(107);

                    b.Property<int?>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(109);

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(110);

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<Guid>("StoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(108);

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(105);

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserGuid");

                    b.ToTable("StoryPublish", (string)null);
                });

            modelBuilder.Entity("ConnectVN.Social_Network.Storys.StoryReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CreatedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(107);

                    b.Property<int?>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(109);

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(110);

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<Guid>("StoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(108);

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(105);

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserGuid");

                    b.ToTable("StoryReview", (string)null);
                });

            modelBuilder.Entity("ConnectVN.Social_Network.Tags.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("CreatedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(107);

                    b.Property<int?>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(109);

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(106);

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(110);

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(108);

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(105);

                    b.HasKey("Id");

                    b.ToTable("Tag", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDateTS = 1672531200.0,
                            CreatedUserId = 1,
                            CreatedUserName = "muonroi",
                            Details = "Truyện đã hoàn thành xong",
                            Guid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            SiteId = 0,
                            TagName = "Đã hoàn thành"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDateTS = 1672531200.0,
                            CreatedUserId = 1,
                            CreatedUserName = "muonroi",
                            Details = "Truyện chưa hoàn thành xong",
                            Guid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            SiteId = 0,
                            TagName = "Chưa hoàn thành"
                        });
                });

            modelBuilder.Entity("ConnectVN.Social_Network.Tags.TagInStory", b =>
                {
                    b.Property<Guid>("StoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<double>("CreatedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(107);

                    b.Property<int?>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(109);

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(110);

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(108);

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(105);

                    b.HasKey("StoryGuid", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TagInStory", (string)null);
                });

            modelBuilder.Entity("ConnectVN.Social_Network.Users.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LockReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e0223a03-2945-49db-976e-736433465b7f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7900a40e-ff12-41bd-95b6-6c3fc294fd0b",
                            Email = "leanhphi1706@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Phi Le",
                            PasswordHash = "AQAAAAEAACcQAAAAEHwagF11oCjTp3pLAWt//8vtinUTnYvfTdFfR30F2lapmfOZOvW2H10hJFsPkR6yYg==",
                            PhoneNumber = "093.310.5367",
                            PhoneNumberConfirmed = false,
                            Status = 1,
                            Surname = "Anh",
                            TwoFactorEnabled = false,
                            UserName = "muonroi"
                        });
                });

            modelBuilder.Entity("ConnectVN.Social_Network.Users.BookMarkStory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BookmarkDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("CreatedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(107);

                    b.Property<int?>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(109);

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(110);

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<Guid>("StoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(108);

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(105);

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserGuid");

                    b.ToTable("BookMarkStory", (string)null);
                });

            modelBuilder.Entity("ConnectVN.Social_Network.Users.FollowingAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("CreatedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(107);

                    b.Property<int?>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(109);

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(110);

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<Guid>("StoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("float")
                        .HasColumnOrder(108);

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(105);

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserGuid");

                    b.ToTable("FollowingAuthor", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MuonRoiSocialNetwork.Domains.DomainObjects.Groups.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("72377426-b057-46ca-98ff-1ca9d33ea0c1"),
                            ConcurrencyStamp = "63311886-7f55-45f6-aa4b-75f8bbee5503",
                            Description = "Người quản lý cao nhất",
                            Name = "Administratior"
                        });
                });

            modelBuilder.Entity("ConnectVN.Social_Network.Chapters.Chapter", b =>
                {
                    b.HasOne("ConnectVN.Social_Network.Storys.Story", "Story")
                        .WithMany("Chapters")
                        .HasForeignKey("StoryGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");
                });

            modelBuilder.Entity("ConnectVN.Social_Network.Roles.GroupUserMember", b =>
                {
                    b.HasOne("MuonRoiSocialNetwork.Domains.DomainObjects.Groups.AppRole", "AppRole")
                        .WithMany("GroupUserMember")
                        .HasForeignKey("AppRoleKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectVN.Social_Network.Users.AppUser", "UserMember")
                        .WithMany("GroupUserMember")
                        .HasForeignKey("AppUserKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppRole");

                    b.Navigation("UserMember");
                });

            modelBuilder.Entity("ConnectVN.Social_Network.Storys.Story", b =>
                {
                    b.HasOne("ConnectVN.Social_Network.Categories.Category", "Category")
                        .WithMany("Storys")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ConnectVN.Social_Network.Storys.StoryNotifications", b =>
                {
                    b.HasOne("ConnectVN.Social_Network.Storys.Story", "Story")
                        .WithMany("StoryNotifications")
                        .HasForeignKey("StoryGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectVN.Social_Network.Users.AppUser", "UserMember")
                        .WithMany("StoryNotifications")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");

                    b.Navigation("UserMember");
                });

            modelBuilder.Entity("ConnectVN.Social_Network.Storys.StoryPublish", b =>
                {
                    b.HasOne("ConnectVN.Social_Network.Users.AppUser", "UserMember")
                        .WithMany("StoryPublish")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserMember");
                });

            modelBuilder.Entity("ConnectVN.Social_Network.Storys.StoryReview", b =>
                {
                    b.HasOne("ConnectVN.Social_Network.Users.AppUser", "UserMember")
                        .WithMany("StoryReview")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserMember");
                });

            modelBuilder.Entity("ConnectVN.Social_Network.Tags.TagInStory", b =>
                {
                    b.HasOne("ConnectVN.Social_Network.Storys.Story", "Story")
                        .WithMany("TagInStory")
                        .HasForeignKey("StoryGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectVN.Social_Network.Tags.Tag", "Tag")
                        .WithMany("TagInStory")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ConnectVN.Social_Network.Users.BookMarkStory", b =>
                {
                    b.HasOne("ConnectVN.Social_Network.Users.AppUser", "UserMember")
                        .WithMany("BookMarkStory")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserMember");
                });

            modelBuilder.Entity("ConnectVN.Social_Network.Users.FollowingAuthor", b =>
                {
                    b.HasOne("ConnectVN.Social_Network.Users.AppUser", "UserMember")
                        .WithMany("FollowingAuthor")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserMember");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("MuonRoiSocialNetwork.Domains.DomainObjects.Groups.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ConnectVN.Social_Network.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ConnectVN.Social_Network.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("MuonRoiSocialNetwork.Domains.DomainObjects.Groups.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectVN.Social_Network.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ConnectVN.Social_Network.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConnectVN.Social_Network.Categories.Category", b =>
                {
                    b.Navigation("Storys");
                });

            modelBuilder.Entity("ConnectVN.Social_Network.Storys.Story", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("StoryNotifications");

                    b.Navigation("TagInStory");
                });

            modelBuilder.Entity("ConnectVN.Social_Network.Tags.Tag", b =>
                {
                    b.Navigation("TagInStory");
                });

            modelBuilder.Entity("ConnectVN.Social_Network.Users.AppUser", b =>
                {
                    b.Navigation("BookMarkStory");

                    b.Navigation("FollowingAuthor");

                    b.Navigation("GroupUserMember");

                    b.Navigation("StoryNotifications");

                    b.Navigation("StoryPublish");

                    b.Navigation("StoryReview");
                });

            modelBuilder.Entity("MuonRoiSocialNetwork.Domains.DomainObjects.Groups.AppRole", b =>
                {
                    b.Navigation("GroupUserMember");
                });
#pragma warning restore 612, 618
        }
    }
}
